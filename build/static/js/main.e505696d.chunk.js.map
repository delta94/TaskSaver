{"version":3,"sources":["contexts/MessageContext.tsx","services/helper.tsx","services/auth.tsx","components/Message/Message.tsx","components/Forms/Validator/Validator.tsx","styles/Styles.tsx","components/Forms/Login.tsx","components/Forms/Register.tsx","services/tasks.tsx","components/Tasks/TaskForm.tsx","components/Tasks/DeleteTask.tsx","components/Tasks/TaskView.tsx","components/Tasks/TasksTable.tsx","components/Tasks/TasksContainer.tsx","components/Routes/Page404.tsx","components/Logout/Logout.tsx","components/Navbar/Navbar.tsx","components/Routes/AuthenticatedRoute.tsx","components/Routes/UnauthenticatedRoute.tsx","components/Routes/DefaultRoute.tsx","App.tsx","serviceWorker.tsx","index.tsx","images/appIcon.png"],"names":["MessageContext","createContext","MessageContextProvider","children","useState","message","setMessage","messageSeverity","setMessageSeverity","Provider","value","clearMessage","restOptions","formTypes","setRestOptions","methodType","body","method","headers","localStorage","token","JSON","stringify","handleResponse","res","a","status","errorCodes","json","data","includes","success","loginService","options","fetch","registerService","handleAuthForm","formInputs","history","setErrorMessage","resUserData","user","setUserInLS","loggedInUser","push","messages","messageSeverities","SUCCESS","ERROR","WARNING","useStyles","makeStyles","theme","root","width","marginTop","spacing","Message","useContext","open","setOpen","classes","closeMessage","useEffect","className","Snackbar","autoHideDuration","onClose","elevation","variant","severity","emailRegex","RegExp","phoneRegex","nameRegex","usernameRegex","validateUser","formType","firstName","lastName","phone","username","email","password","isValid","errors","test","length","container","header","marginBottom","fontSize","fontWeight","dialog","dialogActions","justifyContent","contentText","minWidth","overflow","textOverflow","description","content","exitToAppIcon","color","form","paper","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","submit","dialogButtonsWrapper","addTaskButton","Login","setEmail","setPassword","handleSubmit","e","preventDefault","Container","component","maxWidth","Avatar","Typography","onSubmit","TextField","required","fullWidth","label","autoComplete","onChange","target","type","Button","Register","setFirstName","setLastName","setPhone","setUsername","isAdmin","setIsAdmin","role","FormControlLabel","control","Checkbox","checked","getTasksService","createTaskService","editTaskService","_id","deleteTaskService","taskOperationHandler","IsOperationSucceeded","TaskForm","getTasks","taskToEdit","userId","parse","isEditType","title","setTitle","setDescription","setContent","isButtonDisabled","setButtonDisabled","handleClickOpen","handleClose","setFormValues","editOperation","addOperation","newTask","createdAt","Date","now","updatedTask","compareTasks","isTasksEqual","taskToEditValues","__v","updatedTaskValues","Object","keys","sort","IconButton","onClick","Dialog","aria-labelledby","DialogContent","disabled","DeleteTask","task","deleteTask","DialogTitle","DialogContentText","style","DialogActions","TaskView","table","TasksTable","tasks","TableContainer","Paper","Table","aria-label","TableHead","TableRow","map","cell","index","TableCell","key","TableBody","size","align","date","dateParts","slice","split","reverse","newDate","part","displayDate","Grid","item","xs","lg","TasksContainer","setTasks","setTaskOperationMessage","Page404","Logout","useHistory","clear","autoFocus","menuButton","marginRight","flexGrow","img","height","cursor","Navbar","setLoggedInUser","buttonText","setButtonText","location","useLocation","pathname","hideAuthRoutesButton","setAuthRoutesButtonValue","AppBar","position","Toolbar","src","appIcon","alt","window","reload","AuthenticatedRoute","path","Component","render","props","to","UnauthenticatedRoute","DefaultRoute","App","exact","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"iMAGMA,EAAiBC,0BAMjBC,EAA0C,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAClCC,mBAAS,IADyB,mBACzDC,EADyD,KAChDC,EADgD,OAElBF,mBAAS,IAFS,mBAEzDG,EAFyD,KAExCC,EAFwC,KAShE,OACE,kBAACR,EAAeS,SAAhB,CAAyBC,MAAO,CAAEL,UAASE,kBAAiBD,aAAYE,qBAAoBG,aANzE,WACnBL,EAAW,IACXE,EAAmB,OAKhBL,I,gCCpBDS,EACC,MADDA,EAEE,OAFFA,EAGC,MAHDA,EAII,SAGJC,EACC,MADDA,EAEE,OAGFC,EAAiB,SAACC,EAAoBC,GAC1C,MAAO,CACLC,OAAQF,EACRG,QAAS,CAAE,eAAgB,mBAAoB,cAAgB,UAAhB,OAA2BC,aAAaC,QACvFJ,KAAMK,KAAKC,UAAUN,KAInBO,EAAc,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACbC,EAAWF,EAAXE,OACFC,EAAa,CAAC,IAAK,IAAK,IAAK,KAFd,SAGFH,EAAII,OAHF,UAGfC,EAHe,QAKjBF,EAAWG,SAASJ,GALH,yCAMZ,CAAEG,OAAME,SAAS,IANL,gCASd,CAAEF,OAAME,SAAS,IATH,2CAAH,sDCfdC,EAAY,uCAAG,WAAOhB,GAAP,iBAAAS,EAAA,6DACbQ,EAAUnB,EAAeF,EAAkBI,GAD9B,SAEDkB,MAAM,GAAD,OAJb,WAIa,UAAoBD,GAFxB,cAEbT,EAFa,yBAGZD,EAAeC,IAHH,2CAAH,sDAMZW,EAAe,uCAAG,WAAOnB,GAAP,iBAAAS,EAAA,6DAChBQ,EAAUnB,EAAeF,EAAkBI,GAD3B,SAEJkB,MAAM,GAAD,OAVb,WAUa,aAAuBD,GAFxB,cAEhBT,EAFgB,yBAGfD,EAAeC,IAHA,2CAAH,sDAMfY,EAAiB,SAACZ,EAAUa,EAAiBC,EAAkBC,GAAgD,IAAD,EACpEf,EAAIK,KAApCW,EADoG,EAC1GC,KAAmBrB,EADuF,EACvFA,MAAOf,EADgF,EAChFA,QAElC,GAAIe,EAAO,CACT,IAAMqB,EAAI,eAAQD,EAAR,GAAwBH,GAClCK,EAAYD,EAAMrB,EAAOkB,QAEzBC,EAAgBlC,IAIdqC,EAAW,uCAAG,WAAOD,EAAYrB,EAAekB,GAAlC,SAAAb,EAAA,sDAClBN,aAAawB,aAAetB,KAAKC,UAAUmB,GAC3CtB,aAAaC,MAAQA,EACrBkB,EAAQM,KAAK,UAHK,2CAAH,0D,2BCtBXC,EAEQ,iBAMRC,EAAoB,CACxBC,QAAS,UACTC,MAAO,QACPC,QAAS,WAGLC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OACP,YAAa,CACXC,UAAWH,EAAMI,QAAQ,SAUzBC,EAA2B,WAAM,MAEcC,qBAAW1D,GAAtDK,EAF6B,EAE7BA,QAASE,EAFoB,EAEpBA,gBAAiBI,EAFG,EAEHA,aAFG,EAGbP,oBAAS,GAHI,mBAG9BuD,EAH8B,KAGxBC,EAHwB,KAI/BC,EAAUX,IAEVY,EAAe,WACnBnD,IACAiD,GAAQ,IASV,OANAG,qBAAU,WACRjB,GAAqBvC,EAAkBqD,GAAQ,GAAQE,MAGtD,CAACzD,EAASE,IAGX,yBAAKyD,UAAWH,EAAQR,MACrBhD,GAAWE,GAAmB,kBAAC0D,EAAA,EAAD,CAAUN,KAAMA,EAAMO,iBAAkB,IAAMC,QAAS,kBAAML,MAC1F,kBAAC,IAAD,CAAUM,UAAW,EAAGC,QAAQ,SAASC,SAAU/D,EAAiB4D,QAAS,kBAAML,MAAiBzD,MCpDtGkE,EAAa,IAAIC,OAAO,yIACxBC,EAAa,IAAID,OAAO,eACxBE,EAAY,IAAIF,OAAO,sBACvBG,EAAgB,IAAIH,OAAO,sBAE3B3D,EACG,QADHA,EAEM,WAGN+D,EAAe,SAACnC,EAAYoC,GAAsB,IAC9CC,EAA0DrC,EAA1DqC,UAAWC,EAA+CtC,EAA/CsC,SAAUC,EAAqCvC,EAArCuC,MAAOC,EAA8BxC,EAA9BwC,SAAUC,EAAoBzC,EAApByC,MAAOC,EAAa1C,EAAb0C,SACjD3D,EAA4C,CAAE4D,SAAS,EAAMC,OAAQ,IAgCzE,OA9BKd,EAAWe,KAAKJ,IACnB1D,EAAI6D,OAAOzC,KAAK,uCAGduC,EAASI,OAAS,GACpB/D,EAAI6D,OAAOzC,KAAK,+CAGdiC,IAAahE,GAAsBiE,GAAaC,GAAYC,GAASC,IAClEP,EAAUY,KAAKR,IAClBtD,EAAI6D,OAAOzC,KAAK,oCAGb8B,EAAUY,KAAKP,IAClBvD,EAAI6D,OAAOzC,KAAK,mCAGb6B,EAAWa,KAAKN,IACnBxD,EAAI6D,OAAOzC,KAAK,sCAGb+B,EAAcW,KAAKL,IACtBzD,EAAI6D,OAAOzC,KAAK,gDAIhBpB,EAAI6D,OAAOE,OAAS,IACtB/D,EAAI4D,SAAU,GAGT5D,GC5CHgE,EAAY,CAChBC,OAAQ,CACNC,aAAc,MACdC,SAAU,WACVC,WAAY,MAIVC,EAAS,CACbC,cAAe,CACbC,eAAgB,UAElBC,YAAa,CACXC,SAAU,QACVC,SAAU,SACVC,aAAc,YAEhBC,YAAa,CACXT,SAAU,UAEZU,QAAS,CACPV,SAAU,QAEZW,cAAe,CACbC,MAAO,UAILC,EAAOrD,aAAW,SAACC,GACvB,MAAO,CACLqD,MAAO,CACLlD,UAAWH,EAAMI,QAAQ,GACzBkC,aAActC,EAAMI,QAAQ,GAC5BkD,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNC,OAAQ1D,EAAMI,QAAQ,GACtBuD,gBAAiB3D,EAAM4D,QAAQC,UAAUC,MAE3CV,KAAM,CACJlD,MAAO,OACPC,UAAWH,EAAMI,QAAQ,IAE3B2D,OAAQ,CACNL,OAAQ1D,EAAMI,QAAQ,EAAG,EAAG,IAE9B4D,qBAAsB,CACpBV,QAAS,OACTX,eAAgB,SAChBxC,UAAW,QAEb8D,cAAe,CACb9D,UAAW,OACXmC,aAAc,Y,6DCML4B,EA7CgB,SAAC,GAAiB,IAAfhF,EAAc,EAAdA,QAAc,EAEWoB,qBAAW1D,GAA5DM,EAFsC,EAEtCA,WAAYE,EAF0B,EAE1BA,mBAAoBG,EAFM,EAENA,aAFM,EAGpBP,mBAAS,IAHW,mBAGvC8E,EAHuC,KAGhCqC,EAHgC,OAIdnH,mBAAS,IAJK,mBAIvC+E,EAJuC,KAI7BqC,EAJ6B,KAKxC3D,EAAU2C,IAEViB,EAAY,uCAAG,WAAOC,GAAP,uBAAAjG,EAAA,yDACnBiG,EAAEC,iBACFhH,MAGMa,EAAMoD,EADNvC,EAAa,CAAE6C,QAAOC,YACStE,IAE7BuE,QAPW,iCAQCpD,EAAaK,GARd,OAQXb,EARW,OASXiB,EATW,OASJjB,QATI,IASJA,GATI,UASJA,EAAKK,YATD,aASJ,EAAWY,KACxBL,EAAeZ,EAAKiB,EAAMH,EAASC,GAVlB,wBAYjBA,EAAgBf,EAAI6D,OAAO,IAZV,4CAAH,sDAgBZ9C,EAAkB,SAAClC,GACvBC,EAAWD,GACXG,EAAmBsC,EAAkBE,QAGvC,OACE,kBAAC4E,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACnC,yBAAK9D,UAAWH,EAAQ4C,OACtB,kBAACsB,EAAA,EAAD,CAAQ/D,UAAWH,EAAQgD,QACzB,kBAAC,IAAD,OAEF,kBAACmB,EAAA,EAAD,CAAYH,UAAU,KAAKxD,QAAQ,MAAnC,SACA,0BAAML,UAAWH,EAAQ2C,KAAMyB,SAAUR,GACvC,kBAACS,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,QAAQC,aAAa,QAAQ5H,MAAOwE,EAAOqD,SAAU,SAACb,GAAD,OAAOH,EAASG,EAAEc,OAAO9H,UACrJ,kBAACwH,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,WAAWC,aAAa,WAAW5H,MAAOyE,EAAUsD,KAAK,WAAWF,SAAU,SAACb,GAAD,OAAOF,EAAYE,EAAEc,OAAO9H,UACjL,kBAACgI,EAAA,EAAD,CAAQD,KAAK,SAASL,WAAS,EAAC/D,QAAQ,YAAYkC,MAAM,UAAUvC,UAAWH,EAAQsD,QAAvF,a,kBCsBKwB,EA3DmB,SAAC,GAAiB,IAAfrG,EAAc,EAAdA,QAAc,EAEQoB,qBAAW1D,GAA5DM,EAFyC,EAEzCA,WAAYE,EAF6B,EAE7BA,mBAAoBG,EAFS,EAETA,aAFS,EAGfP,mBAAS,IAHM,mBAG1C0E,EAH0C,KAG/B8D,EAH+B,OAIjBxI,mBAAS,IAJQ,mBAI1C2E,EAJ0C,KAIhC8D,EAJgC,OAKvBzI,mBAAS,IALc,mBAK1C4E,EAL0C,KAKnC8D,EALmC,OAMjB1I,mBAAS,IANQ,mBAM1C6E,EAN0C,KAMhC8D,EANgC,OAOvB3I,mBAAS,IAPc,mBAO1C8E,EAP0C,KAOnCqC,EAPmC,OAQjBnH,mBAAS,IARQ,mBAQ1C+E,EAR0C,KAQhCqC,EARgC,OASnBpH,oBAAS,GATU,mBAS1C4I,EAT0C,KASjCC,EATiC,KAU3CpF,GAAU2C,IAEViB,GAAY,uCAAG,WAAOC,GAAP,qBAAAjG,EAAA,yDACnBiG,EAAEC,iBACFhH,MAIMa,EAAMoD,EADNvC,EAAa,CAAEyC,YAAWC,WAAUC,QAAOC,WAAUC,QAAOC,WAAU+D,KADtEA,EAAOF,EAAU,EAAI,GAEUnI,IAE7BuE,QARW,iCASCjD,EAAgBE,GATjB,OASXb,EATW,OAWjBY,EAAeZ,EADF,CAAEyD,WAAUiE,QACC5G,EAASC,IAXlB,wBAajBA,GAAgBf,EAAI6D,OAAO,IAbV,4CAAH,sDAiBZ9C,GAAkB,SAAClC,GACvBC,EAAWD,GACXG,EAAmBsC,EAAkBE,QAGvC,OACE,kBAAC4E,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACnC,yBAAK9D,UAAWH,GAAQ4C,OACtB,kBAACsB,EAAA,EAAD,CAAQ/D,UAAWH,GAAQgD,QACzB,kBAAC,IAAD,OAEF,kBAACmB,EAAA,EAAD,CAAYH,UAAU,KAAKxD,QAAQ,MAAnC,YACA,0BAAML,UAAWH,GAAQ2C,KAAMyB,SAAUR,IACvC,kBAACS,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,aAAaC,aAAa,aAAa5H,MAAOoE,EAAWyD,SAAU,SAACb,GAAD,OAAOkB,EAAalB,EAAEc,OAAO9H,UACvK,kBAACwH,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,YAAYC,aAAa,YAAY5H,MAAOqE,EAAUwD,SAAU,SAACb,GAAD,OAAOmB,EAAYnB,EAAEc,OAAO9H,UACnK,kBAACwH,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,QAAQC,aAAa,QAAQ5H,MAAOsE,EAAOuD,SAAU,SAACb,GAAD,OAAOoB,EAASpB,EAAEc,OAAO9H,UACrJ,kBAACwH,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,WAAWC,aAAa,WAAW5H,MAAOuE,EAAUsD,SAAU,SAACb,GAAD,OAAOqB,EAAYrB,EAAEc,OAAO9H,UACjK,kBAACwH,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,QAAQC,aAAa,QAAQ5H,MAAOwE,EAAOqD,SAAU,SAACb,GAAD,OAAOH,EAASG,EAAEc,OAAO9H,UACrJ,kBAACwH,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,WAAWC,aAAa,WAAW5H,MAAOyE,EAAUsD,KAAK,WAAWF,SAAU,SAACb,GAAD,OAAOF,EAAYE,EAAEc,OAAO9H,UACjL,kBAACyI,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAU9C,MAAM,UAAU+C,QAASN,EAAST,SAAU,kBAAMU,GAAYD,MACjFX,MAAM,UAER,kBAACK,EAAA,EAAD,CAAQD,KAAK,SAASL,WAAS,EAAC/D,QAAQ,YAAYkC,MAAM,UAAUvC,UAAWH,GAAQsD,QAAvF,gBCnEFpE,GAAmBD,EAAnBC,QAASC,GAAUF,EAAVE,MAGXuG,GAAe,uCAAG,8BAAA9H,EAAA,6DAChBQ,EAAUnB,EAAeF,GADT,SAEJsB,MAAM,GAAD,OAJb,aAI2BD,GAFf,cAEhBT,EAFgB,yBAGfD,EAAeC,IAHA,2CAAH,qDAMfgI,GAAiB,uCAAG,WAAOxI,GAAP,iBAAAS,EAAA,6DAClBQ,EAAUnB,EAAeF,EAAkBI,GADzB,SAENkB,MAVR,YAUsBD,GAFR,cAElBT,EAFkB,yBAGjBD,EAAeC,IAHE,2CAAH,sDAMjBiI,GAAe,uCAAG,WAAOzI,GAAP,iBAAAS,EAAA,6DAChBQ,EAAUnB,EAAeF,EAAiBI,GAD1B,SAEJkB,MAAM,GAAD,OAhBb,YAgBa,YAAclB,EAAK0I,KAAOzH,GAF3B,cAEhBT,EAFgB,yBAGfD,EAAeC,IAHA,2CAAH,sDAMfmI,GAAiB,uCAAG,WAAO3I,GAAP,iBAAAS,EAAA,6DAClBQ,EAAUnB,EAAeF,EAAoBI,GAD3B,SAENkB,MAAM,GAAD,OAtBb,YAsBa,YAAclB,EAAK0I,KAAOzH,GAFzB,cAElBT,EAFkB,yBAGjBD,EAAeC,IAHE,2CAAH,sDAMjBoI,GAAuB,SAACpI,EAAUlB,GAAsE,IACpGD,EAAYmB,EAAIK,KAAhBxB,QACFwJ,EAAuBrI,EAAIO,QAEjC,OADuBzB,EAAWD,EAAlCwJ,EAA2C9G,GAA+BC,IACnE6G,G,+ECgHMC,GAhImB,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,SAAUlF,EAAuC,EAAvCA,SAAUmF,EAA6B,EAA7BA,WAAY1J,EAAiB,EAAjBA,WAC7D2J,EAAS5I,KAAK6I,MAAM/I,aAAawB,cAAc+G,IAC/CS,EAActF,IAAahE,GAAmBmJ,EAFgC,EAG1D5J,mBAAS,IAHiD,mBAG7EgK,EAH6E,KAGtEC,EAHsE,OAI9CjK,mBAAS,IAJqC,mBAI7EgG,EAJ6E,KAIhEkE,EAJgE,OAKtDlK,mBAAS,IAL6C,mBAK7EiG,EAL6E,KAKpEkE,EALoE,OAMtCnK,oBAAS,GAN6B,mBAM7EoK,EAN6E,KAM3DC,EAN2D,OAO5DrK,oBAAS,GAPmD,mBAO7EuD,EAP6E,KAOvEC,EAPuE,KAQ9EC,EAAU2C,IAEVkE,EAAkB,WACtB9G,GAAQ,IAGJ+G,EAAc,WAClB/G,GAAQ,GACR6G,GAAkB,IAGpB1G,qBAAU,WACR,GAAIoG,GAAcH,EAAY,CAAC,IACrBI,EAAgCJ,EAAhCI,MAAOhE,EAAyB4D,EAAzB5D,YAAaC,EAAY2D,EAAZ3D,QAC5BuE,EAAcR,EAAOhE,EAAaC,MAEnC,CAAC8D,EAAYH,EAAYrG,IAE5B,IAIM8D,EAAY,uCAAG,WAAOC,GAAP,eAAAjG,EAAA,yDACnBiG,EAAEC,iBACF8C,GAAkB,GAClBnK,EAAW,GAAI,KAGf6J,EANmB,gCAMuBU,IANvB,OAMNhB,EANM,+CAMsEiB,IANtE,QAMyCjB,EANzC,eAQnBc,IAEId,IAbJe,EAAc,GAAI,GAAI,IAepBb,KAZiB,4CAAH,sDAgBZe,EAAY,uCAAG,gCAAArJ,EAAA,6DACfoI,GAAuB,EACrBkB,EAAU,CAAEd,SAAQG,QAAOhE,cAAaC,UAAS2E,UAAWC,KAAKC,OAFpD,SAGD1B,GAAkBuB,GAHjB,cAGbvJ,EAHa,OAInBqI,EAAuBD,GAAqBpI,EAAKlB,GAJ9B,kBAKZuJ,GALY,2CAAH,qDAQZgB,EAAa,uCAAG,gCAAApJ,EAAA,yDAChBoI,GAAuB,GAEvBG,EAHgB,oBAIZmB,EAAc,CAAEzB,IAAKM,EAAWN,IAAKO,SAAQG,QAAOhE,cAAaC,WAClD+E,EAAapB,EAAYmB,GAL5B,iCAQE1B,GAAgB0B,GARlB,OAQV3J,EARU,OAShBqI,EAAuBD,GAAqBpI,EAAKlB,GATjC,wBAWhBA,EAAW,QAAD,OAASuC,GAAuBC,EAAkBG,SAX5C,iCAeb4G,GAfa,4CAAH,qDAkBbuB,EAAe,SAACpB,EAAkBmB,GACtC,IAAIE,GAAe,EACqBC,GAAqBtB,EAArDuB,IAAqDvB,EAAhDN,IAAgDM,EAA3CgB,UAA2ChB,EAAhCC,OAF+B,aAECD,EAFD,qCAGvBwB,GAAsBL,EAAnDzB,IAAmDyB,EAAtClB,OAHuC,aAGDkB,EAHC,mBAY5D,OAPAM,OAAOC,KAAKJ,GAAkBK,OAC9BF,OAAOC,KAAKF,GAAmBG,OAE3BtK,KAAKC,UAAUgK,KAAsBjK,KAAKC,UAAUkK,KACtDH,GAAe,GAGVA,GAGHT,EAAgB,SAACR,EAAehE,EAAqBC,GACzDgE,EAASD,GACTE,EAAelE,GACfmE,EAAWlE,IAGb,OACE,oCACG8D,EACC,kBAACyB,GAAA,EAAD,CAAYC,QAASnB,GACnB,kBAAC,KAAD,OAGF,kBAAChC,EAAA,EAAD,CAAQD,KAAK,SAASpE,QAAQ,YAAYkC,MAAM,UAAUvC,UAAWH,EAAQwD,cAAewE,QAASnB,GAArG,YAGF,kBAACoB,GAAA,EAAD,CAAQnI,KAAMA,EAAMQ,QAASwG,EAAaoB,kBAAgB,qBACxD,kBAACC,GAAA,EAAD,KACE,kBAACpE,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACnC,yBAAK9D,UAAWH,EAAQ4C,OACtB,kBAACsB,EAAA,EAAD,CAAQ/D,UAAWH,EAAQgD,QACzB,kBAAC,KAAD,OAEF,kBAACmB,EAAA,EAAD,CAAYH,UAAU,KAAKxD,QAAQ,MAAM8F,EAAa,OAAS,MAA/D,SACA,0BAAMnG,UAAWH,EAAQ2C,KAAMyB,SAAUR,GACvC,kBAACS,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,QAAQC,aAAa,QAAQ5H,MAAO0J,EAAO7B,SAAU,SAACb,GAAD,OAAO2C,EAAS3C,EAAEc,OAAO9H,UACrJ,kBAACwH,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,cAAcC,aAAa,cAAc5H,MAAO0F,EAAamC,SAAU,SAACb,GAAD,OAAO4C,EAAe5C,EAAEc,OAAO9H,UAC7K,kBAACwH,EAAA,EAAD,CAAWC,UAAQ,EAAC9D,QAAQ,WAAWyC,OAAO,SAASsB,WAAS,EAACC,MAAM,UAAUC,aAAa,UAAU5H,MAAO2F,EAASkC,SAAU,SAACb,GAAD,OAAO6C,EAAW7C,EAAEc,OAAO9H,UAC7J,yBAAKsD,UAAWH,EAAQuD,sBACtB,kBAACsB,EAAA,EAAD,CAAQuD,SAAUzB,EAAkB/B,KAAK,SAASlC,MAAM,WAAxD,QACA,kBAACmC,EAAA,EAAD,CAAQmD,QAASlB,EAAalC,KAAK,SAASlC,MAAM,WAAlD,kB,kICxEH2F,GA5CqB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMpC,EAA2B,EAA3BA,SAAUzJ,EAAiB,EAAjBA,WAAiB,EAC9CF,oBAAS,GADqC,mBAC/DuD,EAD+D,KACzDC,EADyD,KAOhE+G,EAAc,WAClB/G,GAAQ,IAGJwI,EAAU,uCAAG,4BAAA3K,EAAA,6DACjBmC,GAAQ,GADS,SAGC+F,GAAkBwC,GAHnB,OAGX3K,EAHW,OAIjBoI,GAAqBpI,EAAKlB,GAEtBkB,EAAIO,SACNgI,IAPe,2CAAH,qDAWhB,OACE,oCACE,kBAAC6B,GAAA,EAAD,CAAYC,QArBQ,WACtBjI,GAAQ,KAqBJ,kBAAC,KAAD,OAGF,kBAACkI,GAAA,EAAD,CAAQnI,KAAMA,EAAMQ,QAASwG,GAC3B,kBAAC0B,GAAA,EAAD,uBACA,kBAACL,GAAA,EAAD,KACE,kBAACM,GAAA,EAAD,CAAmBC,MAAO1G,EAAOG,aAAjC,mCACmCmG,EAAK/B,MADxC,OAIF,kBAACoC,GAAA,EAAD,CAAeD,MAAO1G,EAAOC,eAC3B,kBAAC4C,EAAA,EAAD,CAAQmD,QAASO,EAAY7F,MAAM,WAAnC,OACA,kBAACmC,EAAA,EAAD,CAAQmD,QAASlB,EAAapE,MAAM,WAApC,c,oBCNKkG,GAnCmB,SAAC,GAAc,IAAZN,EAAW,EAAXA,KAAW,EACtB/L,oBAAS,GADa,mBACvCuD,EADuC,KACjCC,EADiC,KAOxC+G,EAAc,WAClB/G,GAAQ,IAGV,OACE,oCACE,kBAACgI,GAAA,EAAD,CAAYC,QAVQ,WACtBjI,GAAQ,KAUJ,kBAAC,KAAD,OAGF,kBAACkI,GAAA,EAAD,CAAQnI,KAAMA,EAAMQ,QAASwG,GAC3B,kBAAC0B,GAAA,EAAD,eAAqBF,EAAK/B,OAC1B,kBAAC4B,GAAA,EAAD,KACE,kBAACM,GAAA,EAAD,CAAmBC,MAAO1G,EAAOG,aAC/B,0BAAMuG,MAAO1G,EAAOO,aAApB,gBAA+C+F,EAAK/F,cAEtD,kBAACkG,GAAA,EAAD,CAAmBC,MAAO1G,EAAOG,aAC/B,0BAAMuG,MAAO1G,EAAOQ,SAApB,YAAuC8F,EAAK9F,WAGhD,kBAACmG,GAAA,EAAD,CAAeD,MAAO1G,EAAOC,eAC3B,kBAAC4C,EAAA,EAAD,CAAQmD,QAASlB,EAAapE,MAAM,WAApC,aC7BJrD,GAAYC,YAAW,CAC3BuJ,MAAO,CACLzG,SAAU,OAkEC0G,GAzCqB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAO7C,EAA2B,EAA3BA,SAAUzJ,EAAiB,EAAjBA,WAChDuD,EAAUX,KAEhB,OACE,kBAAC2J,GAAA,EAAD,CAAgBhF,UAAWiF,MACzB,kBAACC,GAAA,EAAD,CAAO/I,UAAWH,EAAQ6I,MAAOM,aAAW,gBAC1C,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACG,CAAC,WAAY,QAAS,QAAS,aAAc,WAAWC,KAAI,SAACC,EAAMC,GAClE,OAAQ,kBAACC,GAAA,EAAD,CAAWC,IAAKF,GAAQD,QAItC,kBAACI,GAAA,EAAD,KACGZ,GAASA,EAAMO,KAAI,SAAChB,GAAD,OAClB,kBAACe,GAAA,EAAD,CAAUK,IAAKpB,EAAKzC,KAClB,kBAAC4D,GAAA,EAAD,CAAWG,KAAK,QAAQC,MAAM,QAAQvB,EAAKlC,OAAOhF,UAClD,kBAACqI,GAAA,EAAD,CAAWG,KAAK,QAAQC,MAAM,QAAQvB,EAAKlC,OAAOjF,OAClD,kBAACsI,GAAA,EAAD,CAAWG,KAAK,QAAQC,MAAM,QAAQvB,EAAKlC,OAAO/E,OAClD,kBAACoI,GAAA,EAAD,CAAWG,KAAK,QAAQC,MAAM,QAA9B,IAxCM,SAACC,GACnB,IAAMC,EAAYD,EAAKE,MAAM,EAAG,IAAIC,MAAM,KAAKC,UAC3CC,EAAU,GAUd,OAPAJ,EAAUT,KAAI,SAACc,EAAcZ,GAC3BW,GAAWC,EACPZ,IAAUO,EAAUrI,OAAS,IAC/ByI,GAAW,QAIRA,EA4B4CE,CAAY/B,EAAKnB,YACxD,kBAACsC,GAAA,EAAD,CAAWG,KAAK,QAAQC,MAAM,QAC5B,kBAACS,GAAA,EAAD,CAAM3I,WAAS,GACb,kBAAC2I,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,GAAD,CAAYnC,KAAMA,EAAMpC,SAAUA,EAAUzJ,WAAYA,KAE1D,kBAAC6N,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,GAAD,CAAUzJ,SAAUhE,EAAgBmJ,WAAYmC,EAAMpC,SAAUA,EAAUzJ,WAAYA,KAExF,kBAAC6N,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,GAAD,CAAUnC,KAAMA,eC7BrBoC,GAjCQ,WAAM,MAEgB7K,qBAAW1D,GAA9CM,EAFmB,EAEnBA,WAAYE,EAFO,EAEPA,mBAFO,EAGDJ,mBAAS,MAHR,mBAGpBwM,EAHoB,KAGb4B,EAHa,KAK3BzK,qBAAU,WACRgG,MAEC,IAEH,IAAMA,EAAQ,uCAAG,gCAAAtI,EAAA,sEACG8H,KADH,OACT/H,EADS,OAEPO,EAAkBP,EAAlBO,QAASF,EAASL,EAATK,KAEbE,GACFyM,EAAS3M,GALI,2CAAH,qDASR4M,EAA0B,SAACpO,EAAiBE,GAChDD,EAAWD,GACXG,EAAmBD,IAGrB,OACE,kBAACqH,EAAA,EAAD,KACE,wBAAI2E,MAAO/G,EAAUC,QAArB,SACA,kBAAC,GAAD,CAAUsE,SAAUA,EAAUlF,SAAUhE,EAAeP,WAAYmO,IACnE,kBAAC,GAAD,CAAY7B,MAAOA,EAAO7C,SAAUA,EAAUzJ,WAAYmO,MClC1DvL,GAAYC,aAAW,iBAAO,CAClCsC,OAAQ,CACNE,SAAU,cAcC+I,GAVC,WACd,IAAM7K,EAAUX,KAEhB,OACE,kBAAC0E,EAAA,EAAD,KACE,wBAAI5D,UAAWH,EAAQ4B,QAAvB,wB,iDCoCSkJ,GAtCA,WAAO,IAAD,EACKvO,oBAAS,GADd,mBACZuD,EADY,KACNC,EADM,KAEbtB,EAAUsM,eAMVjE,EAAc,WAClB/G,GAAQ,IAQV,OACE,oCACE,kBAACgI,GAAA,EAAD,CAAYC,QAfQ,WACtBjI,GAAQ,KAeJ,kBAAC,KAAD,CAAe2I,MAAO1G,EAAOS,iBAE/B,kBAACwF,GAAA,EAAD,CAAQnI,KAAMA,EAAMQ,QAASwG,GAC3B,kBAAC0B,GAAA,EAAD,gBACA,kBAACL,GAAA,EAAD,KACE,kBAACM,GAAA,EAAD,4CAIF,kBAACE,GAAA,EAAD,CAAeD,MAAO1G,EAAOC,eAC3B,kBAAC4C,EAAA,EAAD,CAAQmD,QAlBD,WACb1K,aAAa0N,QACbvM,EAAQM,KAAK,WAgBkB2D,MAAM,UAAUuI,WAAS,GAAlD,OACA,kBAACpG,EAAA,EAAD,CAAQmD,QAASlB,EAAapE,MAAM,WAApC,c,oBCjCJrD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2L,WAAY,CACVC,YAAa5L,EAAMI,QAAQ,IAE7B4G,MAAO,CACL6E,SAAU,GAEZC,IAAK,CACHC,OAAQ,OACRH,YAAa,MACbI,OAAQ,eA2DGC,GAvDA,WACb,IAAMpK,EAAW9D,aAAawB,cAAgBtB,KAAK6I,MAAM/I,aAAawB,cAAcsC,SADjE,EAEqB7E,mBAAS,MAF9B,mBAEZuC,EAFY,KAEE2M,EAFF,OAGiBlP,mBAAS,IAH1B,mBAGZmP,EAHY,KAGAC,EAHA,KAIblN,EAAUsM,eACVa,EAAWC,eACX7L,EAAUX,KAEhBa,qBAAU,WAWRuL,EAAgBnO,aAAawB,cAVI,WAAO,IAC9BgN,EAAaF,EAAbE,SAEJhN,EACFiN,IAE4CJ,EAA/B,WAAbG,GAAsC,MAAbA,EAAiC,WAA4B,SAK1FE,KAEC,CAAClN,EAAc8M,IAElB,IAAMG,EAAuB,WAC3BJ,EAAc,KAWhB,OACE,kBAACM,GAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,GAAA,EAAD,KACE,yBAAKC,IAAKC,KAASC,IAAI,aAAanM,UAAWH,EAAQqL,IAAKrD,QAX9C,WAClBuE,OAAOX,SAASY,YAWZ,kBAACrI,EAAA,EAAD,CAAY3D,QAAQ,KAAKL,UAAWH,EAAQuG,OAA5C,aACCzH,EACC,oCACE,kBAACqF,EAAA,EAAD,CAAY3D,QAAQ,aAAaY,GACjC,kBAAC,GAAD,OAEF,oCACGsK,GAAc,kBAAC7G,EAAA,EAAD,CAAQmD,QAfV,WACrBvJ,EAAQM,KAAK2M,IAc2ChJ,MAAM,WAAWgJ,OCxD9De,GAN6B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACnD,OACE,kBAAC,KAAD,CAAOD,KAAMA,EAAME,OAAQ,SAAAC,GAAK,OAAIvP,aAAawB,aAAe,kBAAC6N,EAAcE,GAAY,kBAAC,KAAD,CAAUC,GAAG,eCI7FC,GAN+B,SAAC,GAAyB,IAAvBL,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACrD,OACE,kBAAC,KAAD,CAAOD,KAAMA,EAAME,OAAQ,SAAAC,GAAK,OAAKvP,aAAawB,aAA0C,kBAAC,KAAD,CAAUgO,GAAG,WAAxC,kBAACH,EAAcE,OCIrEG,GANuB,WACpC,OACE,kBAAC,KAAD,CAAOJ,OAAQ,kBAAMtP,aAAawB,aAAe,kBAAC,KAAD,CAAUgO,GAAG,WAAc,kBAAC,KAAD,CAAUA,GAAG,e,SCsB9EG,GApBH,WACV,OACE,yBAAK9M,UAAU,OACb,kBAAC,KAAD,KACE,kBAAC,GAAD,MACA,kBAAC,EAAD,KACE,kBAAC,KAAD,KACE,kBAAC,GAAD,CAAsB+M,OAAK,EAACR,KAAK,SAASC,UAAWlJ,IACrD,kBAAC,GAAD,CAAsByJ,OAAK,EAACR,KAAK,YAAYC,UAAW7H,IACxD,kBAAC,GAAD,CAAoBoI,OAAK,EAACR,KAAK,SAASC,UAAWjC,KACnD,kBAAC,GAAD,CAAcwC,OAAK,EAACR,KAAK,IAAIC,UAAWjC,KACxC,kBAAC,KAAD,CAAO1G,UAAW6G,MAEpB,kBAAC,EAAD,UCdUsC,QACW,cAA7BZ,OAAOX,SAASwB,UAEa,UAA7Bb,OAAOX,SAASwB,UAEhBb,OAAOX,SAASwB,SAASC,MACvB,2DCbJC,IAASV,OAAO,kBAAE,GAAF,MAAUW,SAASC,eAAe,SDsI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxR,a,mBEjJ5B0R,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.e505696d.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\n// @ts-ignore\r\nconst MessageContext = createContext();\r\n\r\ninterface Props {\r\n  children: any;\r\n}\r\n\r\nconst MessageContextProvider: React.FC<Props> = ({ children }) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messageSeverity, setMessageSeverity] = useState(\"\");\r\n\r\n  const clearMessage = () => {\r\n    setMessage(\"\");\r\n    setMessageSeverity(\"\");\r\n  };\r\n\r\n  return (\r\n    <MessageContext.Provider value={{ message, messageSeverity, setMessage, setMessageSeverity, clearMessage }}>\r\n      {children}\r\n    </MessageContext.Provider>\r\n  );\r\n};\r\n\r\nexport { MessageContext, MessageContextProvider };","const restOptions = {\r\n  get: 'GET',\r\n  post: 'POST',\r\n  put: 'PUT',\r\n  delete: 'DELETE'\r\n};\r\n\r\nconst formTypes = {\r\n  add: \"Add\",\r\n  edit: \"Edit\"\r\n};\r\n\r\nconst setRestOptions = (methodType: string, body?: any) => {\r\n  return {\r\n    method: methodType,\r\n    headers: { 'Content-Type': 'application/json', 'authorization': `Bearer ${localStorage.token}` },\r\n    body: JSON.stringify(body)\r\n  };\r\n};\r\n\r\nconst handleResponse = async (res: Response) => {\r\n  const { status } = res;\r\n  const errorCodes = [400, 401, 404, 500];\r\n  const data = await res.json();\r\n\r\n  if (errorCodes.includes(status)) {\r\n    return { data, success: false };\r\n  }\r\n\r\n  return { data, success: true };\r\n};\r\n\r\nexport { restOptions, formTypes, setRestOptions, handleResponse };","import { restOptions, setRestOptions, handleResponse } from './helper';\r\nimport { User } from '../interfaces/interfaces';\r\n\r\nconst prefix = `api/auth`;\r\n\r\nconst loginService = async (body: User) => {\r\n  const options = setRestOptions(restOptions.post, body);\r\n  const res = await fetch(`${prefix}/login`, options);\r\n  return handleResponse(res);\r\n};\r\n\r\nconst registerService = async (body: User) => {\r\n  const options = setRestOptions(restOptions.post, body);\r\n  const res = await fetch(`${prefix}/register`, options);\r\n  return handleResponse(res);\r\n};\r\n\r\nconst handleAuthForm = (res: any, formInputs: any, history: History, setErrorMessage: (message: string) => void) => {\r\n  const { user: resUserData, token, message } = res.data;\r\n\r\n  if (token) {\r\n    const user = { ...resUserData, ...formInputs };\r\n    setUserInLS(user, token, history);\r\n  } else {\r\n    setErrorMessage(message);\r\n  }\r\n};\r\n\r\nconst setUserInLS = async (user: User, token: string, history: any) => {\r\n  localStorage.loggedInUser = JSON.stringify(user);\r\n  localStorage.token = token;\r\n  history.push('/tasks');\r\n};\r\n\r\nexport { loginService, registerService, handleAuthForm };","import React, { useContext, useState, useEffect } from 'react';\r\nimport { MessageContext } from '../../contexts/MessageContext';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst messages = {\r\n  fillCorrectly: \"Please fill out form correctly\",\r\n  notChanged: \"didn't changed\",\r\n  created: \"created successfully\",\r\n  updated: \"updated successfully\",\r\n  deleted: \"deleted successfully\"\r\n};\r\n\r\nconst messageSeverities = {\r\n  SUCCESS: \"success\",\r\n  ERROR: \"error\",\r\n  WARNING: \"warning\"\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  message?: any;\r\n  messageSeverity?: any;\r\n}\r\n\r\nconst Message: React.FC<Props> = () => {\r\n  // @ts-ignore\r\n  const { message, messageSeverity, clearMessage } = useContext(MessageContext);\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  const closeMessage = () => {\r\n    clearMessage();\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    messageSeverities && messageSeverity ? setOpen(true) : closeMessage();\r\n\r\n    // eslint-disable-next-line\r\n  }, [message, messageSeverity]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {message && messageSeverity && <Snackbar open={open} autoHideDuration={3000} onClose={() => closeMessage()}>\r\n        <MuiAlert elevation={6} variant=\"filled\" severity={messageSeverity} onClose={() => closeMessage()}>{message}</MuiAlert>\r\n      </Snackbar>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Message, messages, messageSeverities };","import { User } from '../../../interfaces/interfaces';\r\n\r\nconst emailRegex = new RegExp(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/);\r\nconst phoneRegex = new RegExp(/^[0-9]{10}$/);\r\nconst nameRegex = new RegExp(/[a-zA-Z][a-zA-Z ]+/);\r\nconst usernameRegex = new RegExp(/^[a-z0-9_-]{3,16}$/);\r\n\r\nconst formTypes = {\r\n  login: \"Login\",\r\n  register: \"Register\"\r\n};\r\n\r\nconst validateUser = (user: User, formType: string) => {\r\n  const { firstName, lastName, phone, username, email, password } = user;\r\n  let res: { isValid: boolean, errors: any[]; } = { isValid: true, errors: [] };\r\n\r\n  if (!emailRegex.test(email)) {\r\n    res.errors.push('Please insert a valid email address');\r\n  }\r\n\r\n  if (password.length < 3) {\r\n    res.errors.push('Password must contain at least 3 characters');\r\n  }\r\n\r\n  if (formType === formTypes.register && firstName && lastName && phone && username) {\r\n    if (!nameRegex.test(firstName)) {\r\n      res.errors.push('Please insert a valid first name');\r\n    }\r\n\r\n    if (!nameRegex.test(lastName)) {\r\n      res.errors.push('Please insert a valid last name');\r\n    }\r\n\r\n    if (!phoneRegex.test(phone)) {\r\n      res.errors.push('Please insert a valid phone number');\r\n    }\r\n\r\n    if (!usernameRegex.test(username)) {\r\n      res.errors.push('Username must contain at least 3 characters');\r\n    }\r\n  }\r\n\r\n  if (res.errors.length > 0) {\r\n    res.isValid = false;\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport { validateUser, formTypes };","import { Theme, makeStyles } from \"@material-ui/core\";\r\n\r\nconst container = {\r\n  header: {\r\n    marginBottom: '2px',\r\n    fontSize: '1.875rem',\r\n    fontWeight: 400\r\n  }\r\n};\r\n\r\nconst dialog = {\r\n  dialogActions: {\r\n    justifyContent: 'center'\r\n  },\r\n  contentText: {\r\n    minWidth: '200px',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis'\r\n  },\r\n  description: {\r\n    fontSize: '1.1rem'\r\n  },\r\n  content: {\r\n    fontSize: '1rem',\r\n  },\r\n  exitToAppIcon: {\r\n    color: 'white'\r\n  }\r\n};\r\n\r\nconst form = makeStyles((theme: Theme) => {\r\n  return {\r\n    paper: {\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center'\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1)\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2)\r\n    },\r\n    dialogButtonsWrapper: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      marginTop: '15px'\r\n    },\r\n    addTaskButton: {\r\n      marginTop: '20px',\r\n      marginBottom: '20px'\r\n    }\r\n  };\r\n});\r\n\r\nexport { container, dialog, form };","\r\nimport React, { useContext, useState, SyntheticEvent } from 'react';\r\nimport { MessageContext } from '../../contexts/MessageContext';\r\nimport { loginService, handleAuthForm } from '../../services/auth';\r\nimport { messageSeverities } from '../Message/Message';\r\nimport { validateUser, formTypes } from './Validator/Validator';\r\nimport { form } from '../../styles/Styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\ninterface Props {\r\n  history: History;\r\n}\r\n\r\nconst Login: React.FC<Props> = ({ history }) => {\r\n  // @ts-ignore\r\n  const { setMessage, setMessageSeverity, clearMessage } = useContext(MessageContext);\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const classes = form();\r\n\r\n  const handleSubmit = async (e: SyntheticEvent) => {\r\n    e.preventDefault();\r\n    clearMessage();\r\n\r\n    const formInputs = { email, password };\r\n    const res = validateUser(formInputs, formTypes.login);\r\n\r\n    if (res.isValid) {\r\n      const res = await loginService(formInputs);\r\n      const user = res?.data?.user;\r\n      handleAuthForm(res, user, history, setErrorMessage);\r\n    } else {\r\n      setErrorMessage(res.errors[0]);\r\n    }\r\n  };\r\n\r\n  const setErrorMessage = (message: string) => {\r\n    setMessage(message);\r\n    setMessageSeverity(messageSeverities.ERROR);\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">Login</Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"email\" autoComplete=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n          <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"password\" autoComplete=\"password\" value={password} type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>Login</Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useContext, useState, SyntheticEvent } from 'react';\r\nimport { MessageContext } from '../../contexts/MessageContext';\r\nimport { registerService, handleAuthForm } from '../../services/auth';\r\nimport { messageSeverities } from '../Message/Message';\r\nimport { validateUser, formTypes } from './Validator/Validator';\r\nimport { form } from '../../styles/Styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\ninterface Props {\r\n  history: History;\r\n}\r\n\r\nconst Register: React.FC<Props> = ({ history }) => {\r\n  // @ts-ignore\r\n  const { setMessage, setMessageSeverity, clearMessage } = useContext(MessageContext);\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const classes = form();\r\n\r\n  const handleSubmit = async (e: SyntheticEvent) => {\r\n    e.preventDefault();\r\n    clearMessage();\r\n\r\n    const role = isAdmin ? 0 : 1;\r\n    const formInputs = { firstName, lastName, phone, username, email, password, role };\r\n    const res = validateUser(formInputs, formTypes.register);\r\n\r\n    if (res.isValid) {\r\n      const res = await registerService(formInputs);\r\n      const user = { username, role };\r\n      handleAuthForm(res, user, history, setErrorMessage);\r\n    } else {\r\n      setErrorMessage(res.errors[0]);\r\n    }\r\n  };\r\n\r\n  const setErrorMessage = (message: string) => {\r\n    setMessage(message);\r\n    setMessageSeverity(messageSeverities.ERROR);\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">Register</Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"first name\" autoComplete=\"first name\" value={firstName} onChange={(e) => setFirstName(e.target.value)} />\r\n          <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"last name\" autoComplete=\"last name\" value={lastName} onChange={(e) => setLastName(e.target.value)} />\r\n          <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"phone\" autoComplete=\"phone\" value={phone} onChange={(e) => setPhone(e.target.value)} />\r\n          <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"username\" autoComplete=\"username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n          <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"email\" autoComplete=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n          <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"password\" autoComplete=\"password\" value={password} type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n          <FormControlLabel\r\n            control={<Checkbox color=\"primary\" checked={isAdmin} onChange={() => setIsAdmin(!isAdmin)} />}\r\n            label=\"admin\"\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>Register</Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Register;","import { restOptions, setRestOptions, handleResponse } from './helper';\r\nimport { Task } from '../interfaces/interfaces';\r\nimport { messageSeverities } from '../components/Message/Message';\r\n\r\nconst { SUCCESS, ERROR } = messageSeverities;\r\nconst prefix = `api/tasks`;\r\n\r\nconst getTasksService = async () => {\r\n  const options = setRestOptions(restOptions.get);\r\n  const res = await fetch(`${prefix}`, options);\r\n  return handleResponse(res);\r\n};\r\n\r\nconst createTaskService = async (body: Task) => {\r\n  const options = setRestOptions(restOptions.post, body);\r\n  const res = await fetch(prefix, options);\r\n  return handleResponse(res);\r\n};\r\n\r\nconst editTaskService = async (body: Task) => {\r\n  const options = setRestOptions(restOptions.put, body);\r\n  const res = await fetch(`${prefix}/${body._id}`, options);\r\n  return handleResponse(res);\r\n};\r\n\r\nconst deleteTaskService = async (body: Task) => {\r\n  const options = setRestOptions(restOptions.delete, body);\r\n  const res = await fetch(`${prefix}/${body._id}`, options);\r\n  return handleResponse(res);\r\n};\r\n\r\nconst taskOperationHandler = (res: any, setMessage: (message: string, messageSeverities: string) => void) => {\r\n  const { message } = res.data;\r\n  const IsOperationSucceeded = res.success;\r\n  IsOperationSucceeded ? setMessage(message, SUCCESS) : setMessage(message, ERROR);\r\n  return IsOperationSucceeded;\r\n};\r\n\r\nexport { getTasksService, createTaskService, editTaskService, deleteTaskService, taskOperationHandler };","import React, { useState, useEffect, SyntheticEvent } from 'react';\r\nimport { createTaskService, editTaskService, taskOperationHandler } from '../../services/tasks';\r\nimport { Task } from '../../interfaces/interfaces';\r\nimport { form } from '../../styles/Styles';\r\nimport { formTypes } from '../../services/helper';\r\nimport { messageSeverities, messages } from '../Message/Message';\r\nimport { TextField, Button, Dialog, Container, Avatar, Typography } from '@material-ui/core';\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\ninterface Props {\r\n  getTasks: () => void;\r\n  formType: string;\r\n  taskToEdit?: Task;\r\n  setMessage: (message: string, messageSeverity: string) => void;\r\n}\r\n\r\nconst TaskForm: React.FC<Props> = ({ getTasks, formType, taskToEdit, setMessage }) => {\r\n  const userId = JSON.parse(localStorage.loggedInUser)._id;\r\n  const isEditType = (formType === formTypes.edit) && taskToEdit;\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [isButtonDisabled, setButtonDisabled] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const classes = form();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setButtonDisabled(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEditType && taskToEdit) {\r\n      const { title, description, content } = taskToEdit;\r\n      setFormValues(title, description, content);\r\n    }\r\n  }, [isEditType, taskToEdit, open]);\r\n\r\n  const resetFormValues = () => {\r\n    setFormValues('', '', '');\r\n  };\r\n\r\n  const handleSubmit = async (e: SyntheticEvent) => {\r\n    e.preventDefault();\r\n    setButtonDisabled(true);\r\n    setMessage('', '');\r\n\r\n    let IsOperationSucceeded;\r\n    isEditType ? IsOperationSucceeded = await editOperation() : IsOperationSucceeded = await addOperation();\r\n\r\n    handleClose();\r\n\r\n    if (IsOperationSucceeded) {\r\n      resetFormValues();\r\n      getTasks();\r\n    }\r\n  };\r\n\r\n  const addOperation = async () => {\r\n    let IsOperationSucceeded = false;\r\n    const newTask = { userId, title, description, content, createdAt: Date.now() };\r\n    const res = await createTaskService(newTask);\r\n    IsOperationSucceeded = taskOperationHandler(res, setMessage);\r\n    return IsOperationSucceeded;\r\n  };\r\n\r\n  const editOperation = async () => {\r\n    let IsOperationSucceeded = false;\r\n\r\n    if (taskToEdit) {\r\n      const updatedTask = { _id: taskToEdit._id, userId, title, description, content };\r\n      const isTasksEqual = compareTasks(taskToEdit, updatedTask);\r\n\r\n      if (!isTasksEqual) {\r\n        const res = await editTaskService(updatedTask);\r\n        IsOperationSucceeded = taskOperationHandler(res, setMessage);\r\n      } else {\r\n        setMessage(`Task ${messages.notChanged}`, messageSeverities.WARNING);\r\n      }\r\n    }\r\n\r\n    return IsOperationSucceeded;\r\n  };\r\n\r\n  const compareTasks = (taskToEdit: Task, updatedTask: Task) => {\r\n    let isTasksEqual = false;\r\n    const { __v, _id, createdAt, userId, ...taskToEditValues } = taskToEdit;\r\n    const { _id: taskId, userId: uId, ...updatedTaskValues } = updatedTask;\r\n\r\n    Object.keys(taskToEditValues).sort();\r\n    Object.keys(updatedTaskValues).sort();\r\n\r\n    if (JSON.stringify(taskToEditValues) === JSON.stringify(updatedTaskValues)) {\r\n      isTasksEqual = true;\r\n    }\r\n\r\n    return isTasksEqual;\r\n  };\r\n\r\n  const setFormValues = (title: string, description: string, content: string) => {\r\n    setTitle(title);\r\n    setDescription(description);\r\n    setContent(content);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isEditType ?\r\n        <IconButton onClick={handleClickOpen}>\r\n          <EditIcon />\r\n        </IconButton>\r\n        :\r\n        <Button type=\"button\" variant=\"contained\" color=\"primary\" className={classes.addTaskButton} onClick={handleClickOpen}>Add Task</Button>\r\n      }\r\n\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogContent>\r\n          <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <AssignmentIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">{isEditType ? 'Edit' : 'Add'} Task</Typography>\r\n              <form className={classes.form} onSubmit={handleSubmit}>\r\n                <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"title\" autoComplete=\"title\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n                <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"description\" autoComplete=\"description\" value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                <TextField required variant=\"outlined\" margin=\"normal\" fullWidth label=\"content\" autoComplete=\"content\" value={content} onChange={(e) => setContent(e.target.value)} />\r\n                <div className={classes.dialogButtonsWrapper}>\r\n                  <Button disabled={isButtonDisabled} type=\"submit\" color=\"primary\">Save</Button>\r\n                  <Button onClick={handleClose} type=\"button\" color=\"primary\">Cancel</Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </Container>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskForm;","import React, { useState } from 'react';\r\nimport { Task } from '../../interfaces/interfaces';\r\nimport { taskOperationHandler } from '../../services/tasks';\r\nimport { deleteTaskService } from '../../services/tasks';\r\nimport { dialog } from '../../styles/Styles';\r\nimport { IconButton } from '@material-ui/core';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\ninterface Props {\r\n  task: Task;\r\n  getTasks: () => void;\r\n  setMessage: (message: string, messageSeverity: string) => void;\r\n}\r\n\r\nconst DeleteTask: React.FC<Props> = ({ task, getTasks, setMessage }) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const deleteTask = async () => {\r\n    setOpen(false);\r\n\r\n    const res = await deleteTaskService(task);\r\n    taskOperationHandler(res, setMessage);\r\n\r\n    if (res.success) {\r\n      getTasks();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={handleClickOpen}>\r\n        <DeleteOutlineIcon />\r\n      </IconButton>\r\n\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>Delete Task...</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText style={dialog.contentText}>\r\n            Are you sure you want to delete {task.title} ?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions style={dialog.dialogActions}>\r\n          <Button onClick={deleteTask} color=\"primary\">Yes</Button>\r\n          <Button onClick={handleClose} color=\"primary\">Cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteTask;","import React, { useState } from 'react';\r\nimport { Task } from '../../interfaces/interfaces';\r\nimport { dialog } from '../../styles/Styles';\r\nimport { IconButton } from '@material-ui/core';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\ninterface Props {\r\n  task: Task;\r\n}\r\n\r\nconst TaskView: React.FC<Props> = ({ task }) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={handleClickOpen}>\r\n        <VisibilityIcon />\r\n      </IconButton>\r\n\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>Title: {task.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText style={dialog.contentText}>\r\n            <span style={dialog.description}>Description: {task.description}</span>\r\n          </DialogContentText>\r\n          <DialogContentText style={dialog.contentText}>\r\n            <span style={dialog.content}>Content: {task.content}</span>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions style={dialog.dialogActions}>\r\n          <Button onClick={handleClose} color=\"primary\">Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskView;","import React from 'react';\r\nimport { Task } from '../../interfaces/interfaces';\r\nimport { formTypes } from '../../services/helper';\r\nimport { makeStyles, Grid } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DeleteTask from './DeleteTask';\r\nimport TaskForm from './TaskForm';\r\nimport TaskView from './TaskView';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650\r\n  }\r\n});\r\n\r\nconst displayDate = (date: string) => {\r\n  const dateParts = date.slice(0, 10).split('-').reverse();\r\n  let newDate = \"\";\r\n\r\n  // eslint-disable-next-line\r\n  dateParts.map((part: string, index: number) => {\r\n    newDate += part;\r\n    if (index !== dateParts.length - 1) {\r\n      newDate += \"/\";\r\n    }\r\n  });\r\n\r\n  return newDate;\r\n};\r\n\r\ninterface Props {\r\n  tasks: Task[] | null;\r\n  getTasks: () => void;\r\n  setMessage: (message: string, messageSeverity: string) => void;\r\n}\r\n\r\nconst TasksTable: React.FC<Props> = ({ tasks, getTasks, setMessage }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {[\"Username\", \"Phone\", \"Email\", \"Created At\", \"Actions\"].map((cell, index) => {\r\n              return (<TableCell key={index}>{cell}</TableCell>);\r\n            })}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {tasks && tasks.map((task: Task) => (\r\n            <TableRow key={task._id}>\r\n              <TableCell size=\"small\" align=\"left\">{task.userId.username}</TableCell>\r\n              <TableCell size=\"small\" align=\"left\">{task.userId.phone}</TableCell>\r\n              <TableCell size=\"small\" align=\"left\">{task.userId.email}</TableCell>\r\n              <TableCell size=\"small\" align=\"left\"> {displayDate(task.createdAt)}</TableCell>\r\n              <TableCell size=\"small\" align=\"left\">\r\n                <Grid container>\r\n                  <Grid item xs={12} lg={4}>\r\n                    <DeleteTask task={task} getTasks={getTasks} setMessage={setMessage} />\r\n                  </Grid>\r\n                  <Grid item xs={12} lg={4}>\r\n                    <TaskForm formType={formTypes.edit} taskToEdit={task} getTasks={getTasks} setMessage={setMessage} />\r\n                  </Grid>\r\n                  <Grid item xs={12} lg={4}>\r\n                    <TaskView task={task} />\r\n                  </Grid>\r\n                </Grid>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table >\r\n    </TableContainer >\r\n  );\r\n};\r\n\r\nexport default TasksTable;","import React, { useContext, useState, useEffect } from 'react';\r\nimport { MessageContext } from '../../contexts/MessageContext';\r\nimport { formTypes } from '../../services/helper';\r\nimport { getTasksService } from '../../services/tasks';\r\nimport { Container } from '@material-ui/core';\r\nimport { container } from '../../styles/Styles';\r\nimport TaskForm from './TaskForm';\r\nimport TasksTable from './TasksTable';\r\n\r\nconst TasksContainer = () => {\r\n  // @ts-ignore\r\n  const { setMessage, setMessageSeverity } = useContext(MessageContext);\r\n  const [tasks, setTasks] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getTasks();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const getTasks = async () => {\r\n    const res = await getTasksService();\r\n    const { success, data } = res;\r\n\r\n    if (success) {\r\n      setTasks(data);\r\n    }\r\n  };\r\n\r\n  const setTaskOperationMessage = (message: string, messageSeverity: string) => {\r\n    setMessage(message);\r\n    setMessageSeverity(messageSeverity);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h1 style={container.header}>Tasks</h1>\r\n      <TaskForm getTasks={getTasks} formType={formTypes.add} setMessage={setTaskOperationMessage} />\r\n      <TasksTable tasks={tasks} getTasks={getTasks} setMessage={setTaskOperationMessage} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TasksContainer;","import React from 'react';\r\nimport { makeStyles, Container } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  header: {\r\n    fontSize: '2.5rem'\r\n  }\r\n}));\r\n\r\nconst Page404 = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container>\r\n      <h1 className={classes.header}>404 Page not found</h1>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Page404;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { dialog } from '../../styles/Styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst Logout = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.clear();\r\n    history.push('/login');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={handleClickOpen}>\r\n        <ExitToAppIcon style={dialog.exitToAppIcon} />\r\n      </IconButton>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>Log out</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to log out ?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions style={dialog.dialogActions}>\r\n          <Button onClick={logout} color=\"primary\" autoFocus>Yes</Button>\r\n          <Button onClick={handleClose} color=\"primary\">Cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Logout;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Logout from '../Logout/Logout';\r\nimport appIcon from '../../images/appIcon.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  img: {\r\n    height: '30px',\r\n    marginRight: '7px',\r\n    cursor: 'pointer'\r\n  }\r\n}));\r\n\r\nconst Navbar = () => {\r\n  const username = localStorage.loggedInUser && JSON.parse(localStorage.loggedInUser).username;\r\n  const [loggedInUser, setLoggedInUser] = useState(null);\r\n  const [buttonText, setButtonText] = useState('');\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const setAuthRoutesButtonValue = () => {\r\n      const { pathname } = location;\r\n\r\n      if (loggedInUser) {\r\n        hideAuthRoutesButton();\r\n      } else {\r\n        pathname === '/login' || pathname === '/' ? setButtonText('register') : setButtonText('login');\r\n      }\r\n    };\r\n\r\n    setLoggedInUser(localStorage.loggedInUser);\r\n    setAuthRoutesButtonValue();\r\n\r\n  }, [loggedInUser, location]);\r\n\r\n  const hideAuthRoutesButton = () => {\r\n    setButtonText('');\r\n  };\r\n\r\n  const refreshPage = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const navigateToPage = () => {\r\n    history.push(buttonText);\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <img src={appIcon} alt='navbar-img' className={classes.img} onClick={refreshPage} />\r\n        <Typography variant=\"h6\" className={classes.title}>TaskSaver</Typography>\r\n        {loggedInUser ?\r\n          <>\r\n            <Typography variant=\"subtitle1\">{username}</Typography>\r\n            <Logout />\r\n          </> :\r\n          <>\r\n            {buttonText && <Button onClick={navigateToPage} color=\"inherit\">{buttonText}</Button>}\r\n          </>\r\n        }\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router';\r\n\r\ninterface Props {\r\n  exact: boolean;\r\n  path: string;\r\n  Component: React.ComponentType<any>;\r\n}\r\n\r\nconst AuthenticatedRoute: React.FC<Props> = ({ path, Component }) => {\r\n  return (\r\n    <Route path={path} render={props => localStorage.loggedInUser ? <Component {...props} /> : <Redirect to=\"/login\" />} />\r\n  );\r\n};\r\n\r\nexport default AuthenticatedRoute;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router';\r\n\r\ninterface Props {\r\n  exact: boolean;\r\n  path: string;\r\n  Component: React.ComponentType<any>;\r\n}\r\n\r\nconst UnauthenticatedRoute: React.FC<Props> = ({ path, Component }) => {\r\n  return (\r\n    <Route path={path} render={props => !localStorage.loggedInUser ? <Component {...props} /> : <Redirect to=\"/tasks\" />} />\r\n  );\r\n};\r\n\r\nexport default UnauthenticatedRoute;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router';\r\n\r\ninterface Props {\r\n  exact: boolean;\r\n  path: string;\r\n  Component: React.ComponentType<any>;\r\n}\r\n\r\nconst DefaultRoute: React.FC<Props> = () => {\r\n  return (\r\n    <Route render={() => localStorage.loggedInUser ? <Redirect to=\"/tasks\" /> : <Redirect to=\"/login\" />} />\r\n  );\r\n};\r\n\r\nexport default DefaultRoute;","import React from 'react';\r\nimport { MessageContextProvider } from './contexts/MessageContext';\r\nimport Login from './components/Forms/Login';\r\nimport Register from './components/Forms/Register';\r\nimport TasksContainer from './components/Tasks/TasksContainer';\r\nimport Page404 from './components/Routes/Page404';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport AuthenticatedRoute from './components/Routes/AuthenticatedRoute';\r\nimport UnauthenticatedRoute from './components/Routes/UnauthenticatedRoute';\r\nimport DefaultRoute from './components/Routes/DefaultRoute';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { Message } from './components/Message/Message';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Navbar />\r\n        <MessageContextProvider>\r\n          <Switch>\r\n            <UnauthenticatedRoute exact path='/login' Component={Login} />\r\n            <UnauthenticatedRoute exact path='/register' Component={Register} />\r\n            <AuthenticatedRoute exact path='/tasks' Component={TasksContainer} />\r\n            <DefaultRoute exact path='/' Component={TasksContainer} />\r\n            <Route component={Page404} />\r\n          </Switch>\r\n          <Message />\r\n        </MessageContextProvider>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(< App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/appIcon.0f30bf67.png\";"],"sourceRoot":""}